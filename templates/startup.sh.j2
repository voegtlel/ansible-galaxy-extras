#!/bin/bash

{% if startup_sleeplock|bool %}
echo "Waiting for init"
# Try to acquire the lock on $SLEEPLOCK_FILE.
# When the init process finishes, it will lock the file.
# Can be disabled by NONUSE=sleeplock
if [[ $NONUSE != *"sleeplock"* ]]
then
    SLEEPLOCK_FILE=${SLEEPLOCK_FILE:-/export/.initdone}
    touch $SLEEPLOCK_FILE
    (
    while true
    do
        if flock -xn 200
        then
            # In case the file is not locked by the init process
            # clear it to ensure no other waiting process assumes
            # we are the init process because the file is locked.
            >$SLEEPLOCK_FILE
            flock -u 200
        elif [ "$(cat $SLEEPLOCK_FILE)" == "done" ]
        then
            # In this case the init file was locked and its contents
            # equal "done" as written by the init process when it acquired
            # the lock.
            break
        fi
        sleep 1
    done
    ) 200<$SLEEPLOCK_FILE
    echo "Init done"
fi
{% endif %}

# Migration path for old images that had the tool_deps under /export/galaxy-central/tool_deps/

if [ -d "/export/galaxy-central/tool_deps/" ] && [ ! -L "/export/galaxy-central/tool_deps/" ]; then
    mkdir -p /export/tool_deps/
    mv /export/galaxy-central/tool_deps /export/
    ln -s /export/tool_deps/ $GALAXY_ROOT/
fi

# This is needed for Docker compose to have a unified alias for the main container.
# Modifying /etc/hosts can only happen during runtime not during build-time
echo "127.0.0.1      galaxy" >> /etc/hosts

# Set number of Galaxy handlers via GALAXY_HANDLER_NUMPROCS or default to 2
ansible localhost -m ini_file -a "dest=/etc/supervisor/conf.d/galaxy.conf section=program:handler option=numprocs value=${GALAXY_HANDLER_NUMPROCS:-2}" &> /dev/null

cd {{ galaxy_server_dir }}
. {{ galaxy_venv_dir }}/bin/activate
umount /var/lib/docker

{% if startup_export_user_files is defined and startup_export_user_files|bool %}
# If /export/ is mounted, export_user_files file moving all data to /export/
# symlinks will point from the original location to the new path under /export/
# If /export/ is not given, nothing will happen in that step
python /usr/local/bin/export_user_files.py $PG_DATA_DIR_DEFAULT
{% endif %}

# Enable Test Tool Shed
if [ "x$ENABLE_TTS_INSTALL" != "x" ]
    then
        echo "Enable installation from the Test Tool Shed."
        export GALAXY_CONFIG_TOOL_SHEDS_CONFIG_FILE=$GALAXY_HOME/tool_sheds_conf.xml
fi

# Remove all default tools from Galaxy by default
if [ "x$BARE" != "x" ]
    then
        echo "Remove all tools from the tool_conf.xml file."
        export GALAXY_CONFIG_TOOL_CONFIG_FILE=config/shed_tool_conf.xml,$GALAXY_ROOT/test/functional/tools/upload_tool_conf.xml
fi

{% if galaxy_extras_config_postgres|bool %}
if [[ $NONUSE != *"postgres"* ]]
then
    # Backward compatibility for exported postgresql directories before version 15.08.
    # In previous versions postgres has the UID/GID of 102/106. We changed this in
    # https://github.com/bgruening/docker-galaxy-stable/pull/71 to GALAXY_POSTGRES_UID=1550 and
    # GALAXY_POSTGRES_GID=1550
    if [ -e /export/postgresql/ ];
        then
            if [ `stat -c %g /export/postgresql/` == "106" ];
                then
                    chown -R postgres:postgres /export/postgresql/
            fi
    fi
fi
{% endif %}


{% if galaxy_extras_config_condor|bool %}
if [ "x$ENABLE_CONDOR" != "x" ]
then
    if [ "x$CONDOR_HOST" != "x" ]
    then
        echo "Enabling Condor with external scheduler at $CONDOR_HOST"
        echo "# Config generated by startup.sh
CONDOR_HOST = $CONDOR_HOST
ALLOW_READ = *
ALLOW_WRITE = *
ALLOW_CLIENT = *
DAEMON_LIST = MASTER, SCHEDD
DISCARD_SESSION_KEYRING_ON_STARTUP = False
TRUST_UID_DOMAIN = true" > /etc/condor/condor_config
    fi

    if [ -e /export/condor_config ]
    then
        echo "Replacing Condor config by locally supplied config from /export/condor_config"
        rm -f /etc/condor/condor_config
        ln -s /export/condor_config /etc/condor/condor_config
    fi
fi
{% endif %}


{% if startup_chown_on_directory is defined and startup_chown_on_directory|bool %}
if [ -e {{ startup_chown_on_directory }}  ];
then
    old_uid=`stat -c '%u' "{{ galaxy_home_dir }}"`
    old_gid=`stat -c '%g' "{{ galaxy_home_dir }}"`
    old_perms="$old_uid:$old_gid"

    source_uid=`stat -c '%u' "{{ startup_chown_on_directory }}"`
    source_gid=`stat -c '%g' "{{ startup_chown_on_directory }}"`
    source_perms="$source_uid:$source_gid"

    deluser {{ galaxy_user_name }}
    groupadd -r {{ galaxy_user_name }} -g $source_gid
    useradd -u $source_uid -r -g {{ galaxy_user_name }} -d "{{ galaxy_home_dir }}" -c "Galaxy User" {{ galaxy_user_name }} -s /bin/bash
    echo {{ galaxy_user_name }} | passwd {{ galaxy_user_name }} --stdin

    for target_path in /opt /home /tmp/slurm;
    do
        chown --from=$old_perms -R $source_perms $target_path
    done
fi
{% endif %}


# Copy or link the slurm/munge config files
if [ -e /export/slurm.conf ]
then
    rm -f /etc/slurm-llnl/slurm.conf
    ln -s /export/slurm.conf /etc/slurm-llnl/slurm.conf
else
    # Configure SLURM with runtime hostname.
    # Use absolute path to python so virtualenv is not used.
    /usr/bin/python /usr/sbin/configure_slurm.py
fi
if [ -e /export/munge.key ]
then
    rm -f /etc/munge/munge.key
    ln -s /export/munge.key /etc/munge/munge.key
    chmod 400 /export/munge.key
fi

# link the gridengine config file
if [ -e /export/act_qmaster ]
then
    rm -f /var/lib/gridengine/default/common/act_qmaster
    ln -s /export/act_qmaster /var/lib/gridengine/default/common/act_qmaster
fi

# Waits until postgres is ready
function wait_for_postgres {
    echo "Checking if database is up and running"
    until /usr/local/bin/check_database.py 2>&1 >/dev/null; do sleep 1; echo "Waiting for database"; done
    echo "Database connected"
}

# $NONUSE can be set to include cron, proftp, reports or nodejs
# if included we will _not_ start these services.
function start_supervisor {
    supervisord -c /etc/supervisor/supervisord.conf
    sleep 5
    {% if supervisor_manage_postgres|bool and not supervisor_postgres_autostart|bool %}
    if [[ $NONUSE != *"postgres"* ]]
    then
        echo "Starting postgres"
        supervisorctl start postgresql
    fi
    {% endif %}
    wait_for_postgres 
    {% if supervisor_manage_cron|bool %}
    if [[ $NONUSE != *"cron"* ]]
    then
        echo "Starting cron"
        supervisorctl start cron
    fi
    {% endif %}
    {% if supervisor_manage_proftp|bool %}
    if [[ $NONUSE != *"proftp"* ]]
    then
        echo "Starting ProFTP"
        supervisorctl start proftpd
    fi
    {% endif %}
    {% if supervisor_manage_reports|bool %}
    if [[ $NONUSE != *"reports"* ]]
    then
        echo "Starting Galaxy reports webapp"
        supervisorctl start reports
    fi
    {% endif %}
    {% if supervisor_manage_ie_proxy|bool %}
    if [[ $NONUSE != *"nodejs"* ]]
    then
        echo "Starting nodejs"
        supervisorctl start galaxy:galaxy_nodejs_proxy
    fi
    {% endif %}
    {% if supervisor_manage_condor|bool %}
    if [[ $NONUSE != *"condor"* ]]
    then
        echo "Starting condor"
        supervisorctl start condor
    fi
    {% endif %}


    {% if supervisor_manage_slurm|bool %}
        if [[ $NONUSE != *"slurmctld"* ]]
        then
            echo "Starting slurmctld"
            supervisorctl start slurmctld
        fi
        if [[ $NONUSE != *"slurmd"* ]]
        then
            echo "Starting slurmd"
            supervisorctl start slurmd
        fi
        supervisorctl start munge

    {% else %}
        if [[ $NONUSE != *"slurmctld"* ]]
        then
            echo "Starting slurmctld"
            /usr/sbin/slurmctld -L {{ slurm_log_dir }}/slurmctld.log
        fi
        if [[ $NONUSE != *"slurmd"* ]]
        then
            echo "Starting slurmd"
            /usr/sbin/slurmd -L {{ slurm_log_dir }}/slurmd.log
        fi

        # We need to run munged regardless
        mkdir -p /var/run/munge && /usr/sbin/munged -f

    {% endif %}
}

{% if galaxy_extras_config_postgres|bool %}
if [[ $NONUSE != *"postgres"* ]]
then
    # Change the data_directory of postgresql in the main config file
    ansible localhost -m lineinfile -a "line='data_directory = \'$PG_DATA_DIR_HOST\'' dest=$PG_CONF_DIR_DEFAULT/postgresql.conf backup=yes state=present regexp='data_directory'" &> /dev/null
fi
{% endif %}

# Try to guess if we are running under --privileged mode
{% if host_docker_legacy|bool %}
if mount | grep "/proc/kcore"; then
    PRIVILEGED=false
else
    PRIVILEGED=true
fi
{% else %}
# Taken from http://stackoverflow.com/questions/32144575/how-to-know-if-a-docker-container-is-running-in-privileged-mode
ip link add dummy0 type dummy >/dev/null
if [[ $? -eq 0 ]]; then
    PRIVILEGED=true
    # clean the dummy0 link
    ip link delete dummy0 >/dev/null
else
    PRIVILEGED=false
fi
{% endif %}
# Try to guess if we are running under --privileged mode
if $PRIVILEGED; then
    echo "Enable Galaxy Interactive Environments."
    export GALAXY_CONFIG_INTERACTIVE_ENVIRONMENT_PLUGINS_DIRECTORY="config/plugins/interactive_environments"
    if [ x$DOCKER_PARENT == "x" ]; then
        #build the docker in docker environment
        bash /root/cgroupfs_mount.sh
        start_supervisor
        supervisorctl start docker
    else
        #inheriting /var/run/docker.sock from parent, assume that you need to
        #run docker with sudo to validate
        echo "{{ galaxy_user_name }} ALL = NOPASSWD : ALL" >> /etc/sudoers
        start_supervisor
    fi
else
    echo "Disable Galaxy Interactive Environments. Start with --privileged to enable IE's."
    export GALAXY_CONFIG_INTERACTIVE_ENVIRONMENT_PLUGINS_DIRECTORY=""
    start_supervisor
fi

if [ "$USE_HTTPS_LETSENCRYPT" != "False" ]
then
    echo "Settting up letsencrypt"
    ansible-playbook -c local /ansible/provision.yml \
    --extra-vars gather_facts=False \
    --extra-vars galaxy_extras_config_ssl=True \
    --extra-vars galaxy_extras_config_ssl_method=letsencrypt \
    --extra-vars galaxy_extras_galaxy_domain="GALAXY_CONFIG_GALAXY_INFRASTRUCTURE_URL" \
    --tags https
fi
if [ "$USE_HTTPS" != "False" ]
then
    if [ -f /export/server.key -a -f /export/server.crt ]
    then
        echo "Copying SSL keys"
        ansible-playbook -c local /ansible/provision.yml \
        --extra-vars gather_facts=False \
        --extra-vars galaxy_extras_config_ssl=True \
        --extra-vars galaxy_extras_config_ssl_method=own \
        --extra-vars src_nginx_ssl_certificate_key=/export/server.key \
        --extra-vars src_nginx_ssl_certificate=/export/server.crt \
        --tags https
    else
        echo "Setting up self-signed SSL keys"
        ansible-playbook -c local /ansible/provision.yml \
        --extra-vars gather_facts=False \
        --extra-vars galaxy_extras_config_ssl=True \
        --extra-vars galaxy_extras_config_ssl_method=self-signed \
        --tags https
    fi
fi

# Disable authentication of Galaxy reports
if [ "x$DISABLE_REPORTS_AUTH" != "x" ]
    then
        # disable authentification by deleting the htpasswd file
        echo "Disable Galaxy reports authentification "
        rm /etc/nginx/htpasswd
fi

# In case the user wants the default admin to be created, do so.
if [ "x$GALAXY_DEFAULT_ADMIN_USER" != "x" ]
    then
        echo "Creating admin user $GALAXY_DEFAULT_ADMIN_USER with key $GALAXY_DEFAULT_ADMIN_KEY and password $GALAXY_DEFAULT_ADMIN_PASSWORD if not existing"
        python /usr/local/bin/create_galaxy_user.py --user "$GALAXY_DEFAULT_ADMIN_USER" --password "$GALAXY_DEFAULT_ADMIN_PASSWORD" -c "$GALAXY_CONFIG_FILE" --key "$GALAXY_DEFAULT_ADMIN_KEY"
fi

# Enable verbose output
if [ `echo ${GALAXY_LOGGING:-'no'} | tr [:upper:] [:lower:]` = "full" ]
    then
        tail -f /var/log/supervisor/* /var/log/nginx/* {{ galaxy_log_dir }}/*.log
    else
        tail -f {{ galaxy_log_dir }}/*.log
fi

